//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5466.
// 
#pragma warning disable 1591

namespace CTWebMgmt.wsXferEventInfo {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="XferEventInfoSoap", Namespace="https://www.camptrak.com/")]
    public partial class XferEventInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback fcnTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnClearErrsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnClearErrs1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUpdateDLStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUpdateDLStatus1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUpdateDLStatus2OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUpdateDLStatusWErrOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnGetRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnGetRecordsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnGetRecords1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnDLResOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnDLRes1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnProcessCTXMLUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnProcessCTXMLUpload1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnProcessCTXMLUpload2OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnAddIntOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnMarkWebCamperAsRetrievedOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnProcessIRUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUpdateDefaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUpdateCustomValOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnProcessCTXMLUploadToTblOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUploadDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUploadData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnUploadDataNoUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnInitLiveChargeMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnMonitorLocalLiveChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitCustomFieldDefIROperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitCustomFieldDefRegOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitWebFlagDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitIRsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnGetCustomDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitMORsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitMORIRsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitRegistrationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitTransTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitCTUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitDiscountDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnCommitMsgImgULOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnSetExcludeFromGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback fcnGetMultRegFlagChargeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public XferEventInfo() {
            this.Url = global::CTWebMgmt.Properties.Settings.Default.CTWebMgmt_wsXferEventInfo_XferEventInfo;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event fcnTestCompletedEventHandler fcnTestCompleted;
        
        /// <remarks/>
        public event fcnClearErrsCompletedEventHandler fcnClearErrsCompleted;
        
        /// <remarks/>
        public event fcnClearErrs1CompletedEventHandler fcnClearErrs1Completed;
        
        /// <remarks/>
        public event fcnUpdateDLStatusCompletedEventHandler fcnUpdateDLStatusCompleted;
        
        /// <remarks/>
        public event fcnUpdateDLStatus1CompletedEventHandler fcnUpdateDLStatus1Completed;
        
        /// <remarks/>
        public event fcnUpdateDLStatus2CompletedEventHandler fcnUpdateDLStatus2Completed;
        
        /// <remarks/>
        public event fcnUpdateDLStatusWErrCompletedEventHandler fcnUpdateDLStatusWErrCompleted;
        
        /// <remarks/>
        public event fcnGetRecordsCompletedEventHandler fcnGetRecordsCompleted;
        
        /// <remarks/>
        public event fcnGetRecordsXMLCompletedEventHandler fcnGetRecordsXMLCompleted;
        
        /// <remarks/>
        public event fcnGetRecords1CompletedEventHandler fcnGetRecords1Completed;
        
        /// <remarks/>
        public event fcnDLResCompletedEventHandler fcnDLResCompleted;
        
        /// <remarks/>
        public event fcnDLRes1CompletedEventHandler fcnDLRes1Completed;
        
        /// <remarks/>
        public event fcnProcessCTXMLUploadCompletedEventHandler fcnProcessCTXMLUploadCompleted;
        
        /// <remarks/>
        public event fcnProcessCTXMLUpload1CompletedEventHandler fcnProcessCTXMLUpload1Completed;
        
        /// <remarks/>
        public event fcnProcessCTXMLUpload2CompletedEventHandler fcnProcessCTXMLUpload2Completed;
        
        /// <remarks/>
        public event fcnAddIntCompletedEventHandler fcnAddIntCompleted;
        
        /// <remarks/>
        public event fcnMarkWebCamperAsRetrievedCompletedEventHandler fcnMarkWebCamperAsRetrievedCompleted;
        
        /// <remarks/>
        public event fcnProcessIRUploadCompletedEventHandler fcnProcessIRUploadCompleted;
        
        /// <remarks/>
        public event fcnUpdateDefaultCompletedEventHandler fcnUpdateDefaultCompleted;
        
        /// <remarks/>
        public event fcnUpdateCustomValCompletedEventHandler fcnUpdateCustomValCompleted;
        
        /// <remarks/>
        public event fcnProcessCTXMLUploadToTblCompletedEventHandler fcnProcessCTXMLUploadToTblCompleted;
        
        /// <remarks/>
        public event fcnUploadDataCompletedEventHandler fcnUploadDataCompleted;
        
        /// <remarks/>
        public event fcnUploadData1CompletedEventHandler fcnUploadData1Completed;
        
        /// <remarks/>
        public event fcnUploadDataNoUpdateCompletedEventHandler fcnUploadDataNoUpdateCompleted;
        
        /// <remarks/>
        public event fcnInitLiveChargeMonitoringCompletedEventHandler fcnInitLiveChargeMonitoringCompleted;
        
        /// <remarks/>
        public event fcnMonitorLocalLiveChargeCompletedEventHandler fcnMonitorLocalLiveChargeCompleted;
        
        /// <remarks/>
        public event fcnCommitCustomFieldDefIRCompletedEventHandler fcnCommitCustomFieldDefIRCompleted;
        
        /// <remarks/>
        public event fcnCommitCustomFieldDefRegCompletedEventHandler fcnCommitCustomFieldDefRegCompleted;
        
        /// <remarks/>
        public event fcnCommitWebFlagDefsCompletedEventHandler fcnCommitWebFlagDefsCompleted;
        
        /// <remarks/>
        public event fcnCommitIRsCompletedEventHandler fcnCommitIRsCompleted;
        
        /// <remarks/>
        public event fcnGetCustomDataCompletedEventHandler fcnGetCustomDataCompleted;
        
        /// <remarks/>
        public event fcnCommitMORsCompletedEventHandler fcnCommitMORsCompleted;
        
        /// <remarks/>
        public event fcnCommitMORIRsCompletedEventHandler fcnCommitMORIRsCompleted;
        
        /// <remarks/>
        public event fcnCommitRegistrationsCompletedEventHandler fcnCommitRegistrationsCompleted;
        
        /// <remarks/>
        public event fcnCommitTransactionsCompletedEventHandler fcnCommitTransactionsCompleted;
        
        /// <remarks/>
        public event fcnCommitTransTypesCompletedEventHandler fcnCommitTransTypesCompleted;
        
        /// <remarks/>
        public event fcnCommitCTUsersCompletedEventHandler fcnCommitCTUsersCompleted;
        
        /// <remarks/>
        public event fcnCommitDiscountDefsCompletedEventHandler fcnCommitDiscountDefsCompleted;
        
        /// <remarks/>
        public event fcnCommitMsgImgULCompletedEventHandler fcnCommitMsgImgULCompleted;
        
        /// <remarks/>
        public event fcnSetExcludeFromGeneralCompletedEventHandler fcnSetExcludeFromGeneralCompleted;
        
        /// <remarks/>
        public event fcnGetMultRegFlagChargeCompletedEventHandler fcnGetMultRegFlagChargeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnTest", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnTest(string _strIn) {
            object[] results = this.Invoke("fcnTest", new object[] {
                        _strIn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnTestAsync(string _strIn) {
            this.fcnTestAsync(_strIn, null);
        }
        
        /// <remarks/>
        public void fcnTestAsync(string _strIn, object userState) {
            if ((this.fcnTestOperationCompleted == null)) {
                this.fcnTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnTestOperationCompleted);
            }
            this.InvokeAsync("fcnTest", new object[] {
                        _strIn}, this.fcnTestOperationCompleted, userState);
        }
        
        private void OnfcnTestOperationCompleted(object arg) {
            if ((this.fcnTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnTestCompleted(this, new fcnTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnClearErrs_1", RequestElementName="fcnClearErrs_1", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnClearErrs_1Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnClearErrs_1Result")]
        public bool fcnClearErrs(long _lngCTUserID) {
            object[] results = this.Invoke("fcnClearErrs", new object[] {
                        _lngCTUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnClearErrsAsync(long _lngCTUserID) {
            this.fcnClearErrsAsync(_lngCTUserID, null);
        }
        
        /// <remarks/>
        public void fcnClearErrsAsync(long _lngCTUserID, object userState) {
            if ((this.fcnClearErrsOperationCompleted == null)) {
                this.fcnClearErrsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnClearErrsOperationCompleted);
            }
            this.InvokeAsync("fcnClearErrs", new object[] {
                        _lngCTUserID}, this.fcnClearErrsOperationCompleted, userState);
        }
        
        private void OnfcnClearErrsOperationCompleted(object arg) {
            if ((this.fcnClearErrsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnClearErrsCompleted(this, new fcnClearErrsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnClearErrs1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnClearErrs_2", RequestElementName="fcnClearErrs_2", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnClearErrs_2Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnClearErrs_2Result")]
        public bool fcnClearErrs(long _lngCTUserID, string _strConn, string _strTbl) {
            object[] results = this.Invoke("fcnClearErrs1", new object[] {
                        _lngCTUserID,
                        _strConn,
                        _strTbl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnClearErrs1Async(long _lngCTUserID, string _strConn, string _strTbl) {
            this.fcnClearErrs1Async(_lngCTUserID, _strConn, _strTbl, null);
        }
        
        /// <remarks/>
        public void fcnClearErrs1Async(long _lngCTUserID, string _strConn, string _strTbl, object userState) {
            if ((this.fcnClearErrs1OperationCompleted == null)) {
                this.fcnClearErrs1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnClearErrs1OperationCompleted);
            }
            this.InvokeAsync("fcnClearErrs1", new object[] {
                        _lngCTUserID,
                        _strConn,
                        _strTbl}, this.fcnClearErrs1OperationCompleted, userState);
        }
        
        private void OnfcnClearErrs1OperationCompleted(object arg) {
            if ((this.fcnClearErrs1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnClearErrs1Completed(this, new fcnClearErrs1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUpdateDLStatus_1", RequestElementName="fcnUpdateDLStatus_1", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnUpdateDLStatus_1Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnUpdateDLStatus_1Result")]
        public bool fcnUpdateDLStatus(long _lngCTUserID) {
            object[] results = this.Invoke("fcnUpdateDLStatus", new object[] {
                        _lngCTUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatusAsync(long _lngCTUserID) {
            this.fcnUpdateDLStatusAsync(_lngCTUserID, null);
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatusAsync(long _lngCTUserID, object userState) {
            if ((this.fcnUpdateDLStatusOperationCompleted == null)) {
                this.fcnUpdateDLStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUpdateDLStatusOperationCompleted);
            }
            this.InvokeAsync("fcnUpdateDLStatus", new object[] {
                        _lngCTUserID}, this.fcnUpdateDLStatusOperationCompleted, userState);
        }
        
        private void OnfcnUpdateDLStatusOperationCompleted(object arg) {
            if ((this.fcnUpdateDLStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUpdateDLStatusCompleted(this, new fcnUpdateDLStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnUpdateDLStatus1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUpdateDLStatus_2", RequestElementName="fcnUpdateDLStatus_2", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnUpdateDLStatus_2Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnUpdateDLStatus_2Result")]
        public bool fcnUpdateDLStatus(long _lngCTUserID, string _strConn) {
            object[] results = this.Invoke("fcnUpdateDLStatus1", new object[] {
                        _lngCTUserID,
                        _strConn});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatus1Async(long _lngCTUserID, string _strConn) {
            this.fcnUpdateDLStatus1Async(_lngCTUserID, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatus1Async(long _lngCTUserID, string _strConn, object userState) {
            if ((this.fcnUpdateDLStatus1OperationCompleted == null)) {
                this.fcnUpdateDLStatus1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUpdateDLStatus1OperationCompleted);
            }
            this.InvokeAsync("fcnUpdateDLStatus1", new object[] {
                        _lngCTUserID,
                        _strConn}, this.fcnUpdateDLStatus1OperationCompleted, userState);
        }
        
        private void OnfcnUpdateDLStatus1OperationCompleted(object arg) {
            if ((this.fcnUpdateDLStatus1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUpdateDLStatus1Completed(this, new fcnUpdateDLStatus1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnUpdateDLStatus2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUpdateDLStatus_3", RequestElementName="fcnUpdateDLStatus_3", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnUpdateDLStatus_3Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnUpdateDLStatus_3Result")]
        public bool fcnUpdateDLStatus(long _lngCTUserID, string _strConn, string _strTblName) {
            object[] results = this.Invoke("fcnUpdateDLStatus2", new object[] {
                        _lngCTUserID,
                        _strConn,
                        _strTblName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatus2Async(long _lngCTUserID, string _strConn, string _strTblName) {
            this.fcnUpdateDLStatus2Async(_lngCTUserID, _strConn, _strTblName, null);
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatus2Async(long _lngCTUserID, string _strConn, string _strTblName, object userState) {
            if ((this.fcnUpdateDLStatus2OperationCompleted == null)) {
                this.fcnUpdateDLStatus2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUpdateDLStatus2OperationCompleted);
            }
            this.InvokeAsync("fcnUpdateDLStatus2", new object[] {
                        _lngCTUserID,
                        _strConn,
                        _strTblName}, this.fcnUpdateDLStatus2OperationCompleted, userState);
        }
        
        private void OnfcnUpdateDLStatus2OperationCompleted(object arg) {
            if ((this.fcnUpdateDLStatus2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUpdateDLStatus2Completed(this, new fcnUpdateDLStatus2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUpdateDLStatus_4", RequestElementName="fcnUpdateDLStatus_4", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnUpdateDLStatus_4Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnUpdateDLStatus_4Result")]
        public string fcnUpdateDLStatusWErr(long _lngCTUserID, string _strConn, string _strTblName, string _strWhere) {
            object[] results = this.Invoke("fcnUpdateDLStatusWErr", new object[] {
                        _lngCTUserID,
                        _strConn,
                        _strTblName,
                        _strWhere});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatusWErrAsync(long _lngCTUserID, string _strConn, string _strTblName, string _strWhere) {
            this.fcnUpdateDLStatusWErrAsync(_lngCTUserID, _strConn, _strTblName, _strWhere, null);
        }
        
        /// <remarks/>
        public void fcnUpdateDLStatusWErrAsync(long _lngCTUserID, string _strConn, string _strTblName, string _strWhere, object userState) {
            if ((this.fcnUpdateDLStatusWErrOperationCompleted == null)) {
                this.fcnUpdateDLStatusWErrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUpdateDLStatusWErrOperationCompleted);
            }
            this.InvokeAsync("fcnUpdateDLStatusWErr", new object[] {
                        _lngCTUserID,
                        _strConn,
                        _strTblName,
                        _strWhere}, this.fcnUpdateDLStatusWErrOperationCompleted, userState);
        }
        
        private void OnfcnUpdateDLStatusWErrOperationCompleted(object arg) {
            if ((this.fcnUpdateDLStatusWErrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUpdateDLStatusWErrCompleted(this, new fcnUpdateDLStatusWErrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnGetRecords_1", RequestElementName="fcnGetRecords_1", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnGetRecords_1Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnGetRecords_1Result")]
        public string fcnGetRecords(string _strSQL, string _strTblName) {
            object[] results = this.Invoke("fcnGetRecords", new object[] {
                        _strSQL,
                        _strTblName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnGetRecordsAsync(string _strSQL, string _strTblName) {
            this.fcnGetRecordsAsync(_strSQL, _strTblName, null);
        }
        
        /// <remarks/>
        public void fcnGetRecordsAsync(string _strSQL, string _strTblName, object userState) {
            if ((this.fcnGetRecordsOperationCompleted == null)) {
                this.fcnGetRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnGetRecordsOperationCompleted);
            }
            this.InvokeAsync("fcnGetRecords", new object[] {
                        _strSQL,
                        _strTblName}, this.fcnGetRecordsOperationCompleted, userState);
        }
        
        private void OnfcnGetRecordsOperationCompleted(object arg) {
            if ((this.fcnGetRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnGetRecordsCompleted(this, new fcnGetRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnGetRecordsXML", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode fcnGetRecordsXML(string _strTblName, string _strSQL, string _strConn) {
            object[] results = this.Invoke("fcnGetRecordsXML", new object[] {
                        _strTblName,
                        _strSQL,
                        _strConn});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void fcnGetRecordsXMLAsync(string _strTblName, string _strSQL, string _strConn) {
            this.fcnGetRecordsXMLAsync(_strTblName, _strSQL, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnGetRecordsXMLAsync(string _strTblName, string _strSQL, string _strConn, object userState) {
            if ((this.fcnGetRecordsXMLOperationCompleted == null)) {
                this.fcnGetRecordsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnGetRecordsXMLOperationCompleted);
            }
            this.InvokeAsync("fcnGetRecordsXML", new object[] {
                        _strTblName,
                        _strSQL,
                        _strConn}, this.fcnGetRecordsXMLOperationCompleted, userState);
        }
        
        private void OnfcnGetRecordsXMLOperationCompleted(object arg) {
            if ((this.fcnGetRecordsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnGetRecordsXMLCompleted(this, new fcnGetRecordsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnGetRecords1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnGetRecords_2", RequestElementName="fcnGetRecords_2", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnGetRecords_2Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnGetRecords_2Result")]
        public string fcnGetRecords(string _strSQL, string _strTblName, string _strConn) {
            object[] results = this.Invoke("fcnGetRecords1", new object[] {
                        _strSQL,
                        _strTblName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnGetRecords1Async(string _strSQL, string _strTblName, string _strConn) {
            this.fcnGetRecords1Async(_strSQL, _strTblName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnGetRecords1Async(string _strSQL, string _strTblName, string _strConn, object userState) {
            if ((this.fcnGetRecords1OperationCompleted == null)) {
                this.fcnGetRecords1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnGetRecords1OperationCompleted);
            }
            this.InvokeAsync("fcnGetRecords1", new object[] {
                        _strSQL,
                        _strTblName,
                        _strConn}, this.fcnGetRecords1OperationCompleted, userState);
        }
        
        private void OnfcnGetRecords1OperationCompleted(object arg) {
            if ((this.fcnGetRecords1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnGetRecords1Completed(this, new fcnGetRecords1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnDLRes_1", RequestElementName="fcnDLRes_1", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnDLRes_1Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnDLRes_1Result")]
        public string fcnDLRes(string _strResXML) {
            object[] results = this.Invoke("fcnDLRes", new object[] {
                        _strResXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnDLResAsync(string _strResXML) {
            this.fcnDLResAsync(_strResXML, null);
        }
        
        /// <remarks/>
        public void fcnDLResAsync(string _strResXML, object userState) {
            if ((this.fcnDLResOperationCompleted == null)) {
                this.fcnDLResOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnDLResOperationCompleted);
            }
            this.InvokeAsync("fcnDLRes", new object[] {
                        _strResXML}, this.fcnDLResOperationCompleted, userState);
        }
        
        private void OnfcnDLResOperationCompleted(object arg) {
            if ((this.fcnDLResCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnDLResCompleted(this, new fcnDLResCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnDLRes1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnDLRes_2", RequestElementName="fcnDLRes_2", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnDLRes_2Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnDLRes_2Result")]
        public string fcnDLRes(string _strResXML, string _strConn) {
            object[] results = this.Invoke("fcnDLRes1", new object[] {
                        _strResXML,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnDLRes1Async(string _strResXML, string _strConn) {
            this.fcnDLRes1Async(_strResXML, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnDLRes1Async(string _strResXML, string _strConn, object userState) {
            if ((this.fcnDLRes1OperationCompleted == null)) {
                this.fcnDLRes1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnDLRes1OperationCompleted);
            }
            this.InvokeAsync("fcnDLRes1", new object[] {
                        _strResXML,
                        _strConn}, this.fcnDLRes1OperationCompleted, userState);
        }
        
        private void OnfcnDLRes1OperationCompleted(object arg) {
            if ((this.fcnDLRes1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnDLRes1Completed(this, new fcnDLRes1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnProcessCTXMLUpload_1", RequestElementName="fcnProcessCTXMLUpload_1", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnProcessCTXMLUpload_1Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnProcessCTXMLUpload_1Result")]
        public string fcnProcessCTXMLUpload(long lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn) {
            object[] results = this.Invoke("fcnProcessCTXMLUpload", new object[] {
                        lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUploadAsync(long lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn) {
            this.fcnProcessCTXMLUploadAsync(lngCTUserID, _strInput, _strAppendSProc, _strKeyFld, _strFldToReturn, null);
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUploadAsync(long lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, object userState) {
            if ((this.fcnProcessCTXMLUploadOperationCompleted == null)) {
                this.fcnProcessCTXMLUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnProcessCTXMLUploadOperationCompleted);
            }
            this.InvokeAsync("fcnProcessCTXMLUpload", new object[] {
                        lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn}, this.fcnProcessCTXMLUploadOperationCompleted, userState);
        }
        
        private void OnfcnProcessCTXMLUploadOperationCompleted(object arg) {
            if ((this.fcnProcessCTXMLUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnProcessCTXMLUploadCompleted(this, new fcnProcessCTXMLUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnProcessCTXMLUpload1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnProcessCTXMLUpload_2", RequestElementName="fcnProcessCTXMLUpload_2", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnProcessCTXMLUpload_2Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnProcessCTXMLUpload_2Result")]
        public string fcnProcessCTXMLUpload(long lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn) {
            object[] results = this.Invoke("fcnProcessCTXMLUpload1", new object[] {
                        lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn,
                        _blnClearAll,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUpload1Async(long lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn) {
            this.fcnProcessCTXMLUpload1Async(lngCTUserID, _strInput, _strAppendSProc, _strKeyFld, _strFldToReturn, _blnClearAll, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUpload1Async(long lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, object userState) {
            if ((this.fcnProcessCTXMLUpload1OperationCompleted == null)) {
                this.fcnProcessCTXMLUpload1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnProcessCTXMLUpload1OperationCompleted);
            }
            this.InvokeAsync("fcnProcessCTXMLUpload1", new object[] {
                        lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn,
                        _blnClearAll,
                        _strConn}, this.fcnProcessCTXMLUpload1OperationCompleted, userState);
        }
        
        private void OnfcnProcessCTXMLUpload1OperationCompleted(object arg) {
            if ((this.fcnProcessCTXMLUpload1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnProcessCTXMLUpload1Completed(this, new fcnProcessCTXMLUpload1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnProcessCTXMLUpload2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnProcessCTXMLUpload_3", RequestElementName="fcnProcessCTXMLUpload_3", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnProcessCTXMLUpload_3Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnProcessCTXMLUpload_3Result")]
        public string fcnProcessCTXMLUpload(long _lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, string _strKeyType) {
            object[] results = this.Invoke("fcnProcessCTXMLUpload2", new object[] {
                        _lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn,
                        _blnClearAll,
                        _strConn,
                        _strKeyType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUpload2Async(long _lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, string _strKeyType) {
            this.fcnProcessCTXMLUpload2Async(_lngCTUserID, _strInput, _strAppendSProc, _strKeyFld, _strFldToReturn, _blnClearAll, _strConn, _strKeyType, null);
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUpload2Async(long _lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, string _strKeyType, object userState) {
            if ((this.fcnProcessCTXMLUpload2OperationCompleted == null)) {
                this.fcnProcessCTXMLUpload2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnProcessCTXMLUpload2OperationCompleted);
            }
            this.InvokeAsync("fcnProcessCTXMLUpload2", new object[] {
                        _lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn,
                        _blnClearAll,
                        _strConn,
                        _strKeyType}, this.fcnProcessCTXMLUpload2OperationCompleted, userState);
        }
        
        private void OnfcnProcessCTXMLUpload2OperationCompleted(object arg) {
            if ((this.fcnProcessCTXMLUpload2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnProcessCTXMLUpload2Completed(this, new fcnProcessCTXMLUpload2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnAddInt", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int fcnAddInt(int intA, int intB) {
            object[] results = this.Invoke("fcnAddInt", new object[] {
                        intA,
                        intB});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void fcnAddIntAsync(int intA, int intB) {
            this.fcnAddIntAsync(intA, intB, null);
        }
        
        /// <remarks/>
        public void fcnAddIntAsync(int intA, int intB, object userState) {
            if ((this.fcnAddIntOperationCompleted == null)) {
                this.fcnAddIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnAddIntOperationCompleted);
            }
            this.InvokeAsync("fcnAddInt", new object[] {
                        intA,
                        intB}, this.fcnAddIntOperationCompleted, userState);
        }
        
        private void OnfcnAddIntOperationCompleted(object arg) {
            if ((this.fcnAddIntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnAddIntCompleted(this, new fcnAddIntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnMarkWebCamperAsRetrieved", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool fcnMarkWebCamperAsRetrieved(long _lngCamperID, string _strDir) {
            object[] results = this.Invoke("fcnMarkWebCamperAsRetrieved", new object[] {
                        _lngCamperID,
                        _strDir});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnMarkWebCamperAsRetrievedAsync(long _lngCamperID, string _strDir) {
            this.fcnMarkWebCamperAsRetrievedAsync(_lngCamperID, _strDir, null);
        }
        
        /// <remarks/>
        public void fcnMarkWebCamperAsRetrievedAsync(long _lngCamperID, string _strDir, object userState) {
            if ((this.fcnMarkWebCamperAsRetrievedOperationCompleted == null)) {
                this.fcnMarkWebCamperAsRetrievedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnMarkWebCamperAsRetrievedOperationCompleted);
            }
            this.InvokeAsync("fcnMarkWebCamperAsRetrieved", new object[] {
                        _lngCamperID,
                        _strDir}, this.fcnMarkWebCamperAsRetrievedOperationCompleted, userState);
        }
        
        private void OnfcnMarkWebCamperAsRetrievedOperationCompleted(object arg) {
            if ((this.fcnMarkWebCamperAsRetrievedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnMarkWebCamperAsRetrievedCompleted(this, new fcnMarkWebCamperAsRetrievedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnProcessIRUpload", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnProcessIRUpload(long _lngCTUserID, string _strInput, string _strConn) {
            object[] results = this.Invoke("fcnProcessIRUpload", new object[] {
                        _lngCTUserID,
                        _strInput,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnProcessIRUploadAsync(long _lngCTUserID, string _strInput, string _strConn) {
            this.fcnProcessIRUploadAsync(_lngCTUserID, _strInput, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnProcessIRUploadAsync(long _lngCTUserID, string _strInput, string _strConn, object userState) {
            if ((this.fcnProcessIRUploadOperationCompleted == null)) {
                this.fcnProcessIRUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnProcessIRUploadOperationCompleted);
            }
            this.InvokeAsync("fcnProcessIRUpload", new object[] {
                        _lngCTUserID,
                        _strInput,
                        _strConn}, this.fcnProcessIRUploadOperationCompleted, userState);
        }
        
        private void OnfcnProcessIRUploadOperationCompleted(object arg) {
            if ((this.fcnProcessIRUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnProcessIRUploadCompleted(this, new fcnProcessIRUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUpdateDefault", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnUpdateDefault(long _lngCTUserID, string _strFldName, string _strVal, string _strDataType, string _strConn) {
            object[] results = this.Invoke("fcnUpdateDefault", new object[] {
                        _lngCTUserID,
                        _strFldName,
                        _strVal,
                        _strDataType,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUpdateDefaultAsync(long _lngCTUserID, string _strFldName, string _strVal, string _strDataType, string _strConn) {
            this.fcnUpdateDefaultAsync(_lngCTUserID, _strFldName, _strVal, _strDataType, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnUpdateDefaultAsync(long _lngCTUserID, string _strFldName, string _strVal, string _strDataType, string _strConn, object userState) {
            if ((this.fcnUpdateDefaultOperationCompleted == null)) {
                this.fcnUpdateDefaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUpdateDefaultOperationCompleted);
            }
            this.InvokeAsync("fcnUpdateDefault", new object[] {
                        _lngCTUserID,
                        _strFldName,
                        _strVal,
                        _strDataType,
                        _strConn}, this.fcnUpdateDefaultOperationCompleted, userState);
        }
        
        private void OnfcnUpdateDefaultOperationCompleted(object arg) {
            if ((this.fcnUpdateDefaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUpdateDefaultCompleted(this, new fcnUpdateDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUpdateCustomVal", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnUpdateCustomVal(long _lngCTUserID, string _strFldName, string _strVal, string _strConn) {
            object[] results = this.Invoke("fcnUpdateCustomVal", new object[] {
                        _lngCTUserID,
                        _strFldName,
                        _strVal,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUpdateCustomValAsync(long _lngCTUserID, string _strFldName, string _strVal, string _strConn) {
            this.fcnUpdateCustomValAsync(_lngCTUserID, _strFldName, _strVal, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnUpdateCustomValAsync(long _lngCTUserID, string _strFldName, string _strVal, string _strConn, object userState) {
            if ((this.fcnUpdateCustomValOperationCompleted == null)) {
                this.fcnUpdateCustomValOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUpdateCustomValOperationCompleted);
            }
            this.InvokeAsync("fcnUpdateCustomVal", new object[] {
                        _lngCTUserID,
                        _strFldName,
                        _strVal,
                        _strConn}, this.fcnUpdateCustomValOperationCompleted, userState);
        }
        
        private void OnfcnUpdateCustomValOperationCompleted(object arg) {
            if ((this.fcnUpdateCustomValCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUpdateCustomValCompleted(this, new fcnUpdateCustomValCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnProcessCTXMLUploadToTbl", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnProcessCTXMLUploadToTbl(long _lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, string _strKeyType, string _strTargetTblName) {
            object[] results = this.Invoke("fcnProcessCTXMLUploadToTbl", new object[] {
                        _lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn,
                        _blnClearAll,
                        _strConn,
                        _strKeyType,
                        _strTargetTblName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUploadToTblAsync(long _lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, string _strKeyType, string _strTargetTblName) {
            this.fcnProcessCTXMLUploadToTblAsync(_lngCTUserID, _strInput, _strAppendSProc, _strKeyFld, _strFldToReturn, _blnClearAll, _strConn, _strKeyType, _strTargetTblName, null);
        }
        
        /// <remarks/>
        public void fcnProcessCTXMLUploadToTblAsync(long _lngCTUserID, string _strInput, string _strAppendSProc, string _strKeyFld, string _strFldToReturn, bool _blnClearAll, string _strConn, string _strKeyType, string _strTargetTblName, object userState) {
            if ((this.fcnProcessCTXMLUploadToTblOperationCompleted == null)) {
                this.fcnProcessCTXMLUploadToTblOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnProcessCTXMLUploadToTblOperationCompleted);
            }
            this.InvokeAsync("fcnProcessCTXMLUploadToTbl", new object[] {
                        _lngCTUserID,
                        _strInput,
                        _strAppendSProc,
                        _strKeyFld,
                        _strFldToReturn,
                        _blnClearAll,
                        _strConn,
                        _strKeyType,
                        _strTargetTblName}, this.fcnProcessCTXMLUploadToTblOperationCompleted, userState);
        }
        
        private void OnfcnProcessCTXMLUploadToTblOperationCompleted(object arg) {
            if ((this.fcnProcessCTXMLUploadToTblCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnProcessCTXMLUploadToTblCompleted(this, new fcnProcessCTXMLUploadToTblCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUploadData", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode fcnUploadData(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strServerKeyField, string _strLocalKeyField, string _strConn) {
            object[] results = this.Invoke("fcnUploadData", new object[] {
                        _xmlNodeToProcess,
                        _strTableName,
                        _strServerKeyField,
                        _strLocalKeyField,
                        _strConn});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUploadDataAsync(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strServerKeyField, string _strLocalKeyField, string _strConn) {
            this.fcnUploadDataAsync(_xmlNodeToProcess, _strTableName, _strServerKeyField, _strLocalKeyField, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnUploadDataAsync(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strServerKeyField, string _strLocalKeyField, string _strConn, object userState) {
            if ((this.fcnUploadDataOperationCompleted == null)) {
                this.fcnUploadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUploadDataOperationCompleted);
            }
            this.InvokeAsync("fcnUploadData", new object[] {
                        _xmlNodeToProcess,
                        _strTableName,
                        _strServerKeyField,
                        _strLocalKeyField,
                        _strConn}, this.fcnUploadDataOperationCompleted, userState);
        }
        
        private void OnfcnUploadDataOperationCompleted(object arg) {
            if ((this.fcnUploadDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUploadDataCompleted(this, new fcnUploadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fcnUploadData1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUploadData2", RequestElementName="fcnUploadData2", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnUploadData2Response", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnUploadData2Result")]
        public System.Xml.XmlNode fcnUploadData(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strServerKeyField, string _strLocalKeyField, string _strConn, int _intHoursOffset) {
            object[] results = this.Invoke("fcnUploadData1", new object[] {
                        _xmlNodeToProcess,
                        _strTableName,
                        _strServerKeyField,
                        _strLocalKeyField,
                        _strConn,
                        _intHoursOffset});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUploadData1Async(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strServerKeyField, string _strLocalKeyField, string _strConn, int _intHoursOffset) {
            this.fcnUploadData1Async(_xmlNodeToProcess, _strTableName, _strServerKeyField, _strLocalKeyField, _strConn, _intHoursOffset, null);
        }
        
        /// <remarks/>
        public void fcnUploadData1Async(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strServerKeyField, string _strLocalKeyField, string _strConn, int _intHoursOffset, object userState) {
            if ((this.fcnUploadData1OperationCompleted == null)) {
                this.fcnUploadData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUploadData1OperationCompleted);
            }
            this.InvokeAsync("fcnUploadData1", new object[] {
                        _xmlNodeToProcess,
                        _strTableName,
                        _strServerKeyField,
                        _strLocalKeyField,
                        _strConn,
                        _intHoursOffset}, this.fcnUploadData1OperationCompleted, userState);
        }
        
        private void OnfcnUploadData1OperationCompleted(object arg) {
            if ((this.fcnUploadData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUploadData1Completed(this, new fcnUploadData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnUploadDataNoUpdate", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode fcnUploadDataNoUpdate(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strConn, int _intHoursOffset, long _lngCTUserID) {
            object[] results = this.Invoke("fcnUploadDataNoUpdate", new object[] {
                        _xmlNodeToProcess,
                        _strTableName,
                        _strConn,
                        _intHoursOffset,
                        _lngCTUserID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void fcnUploadDataNoUpdateAsync(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strConn, int _intHoursOffset, long _lngCTUserID) {
            this.fcnUploadDataNoUpdateAsync(_xmlNodeToProcess, _strTableName, _strConn, _intHoursOffset, _lngCTUserID, null);
        }
        
        /// <remarks/>
        public void fcnUploadDataNoUpdateAsync(System.Xml.XmlNode _xmlNodeToProcess, string _strTableName, string _strConn, int _intHoursOffset, long _lngCTUserID, object userState) {
            if ((this.fcnUploadDataNoUpdateOperationCompleted == null)) {
                this.fcnUploadDataNoUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnUploadDataNoUpdateOperationCompleted);
            }
            this.InvokeAsync("fcnUploadDataNoUpdate", new object[] {
                        _xmlNodeToProcess,
                        _strTableName,
                        _strConn,
                        _intHoursOffset,
                        _lngCTUserID}, this.fcnUploadDataNoUpdateOperationCompleted, userState);
        }
        
        private void OnfcnUploadDataNoUpdateOperationCompleted(object arg) {
            if ((this.fcnUploadDataNoUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnUploadDataNoUpdateCompleted(this, new fcnUploadDataNoUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnInitLocalLiveCharge", RequestElementName="fcnInitLocalLiveCharge", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnInitLocalLiveChargeResponse", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnInitLocalLiveChargeResult")]
        public string fcnInitLiveChargeMonitoring(long _lngCTUserID, long _lngTransactionID, string _strConn) {
            object[] results = this.Invoke("fcnInitLiveChargeMonitoring", new object[] {
                        _lngCTUserID,
                        _lngTransactionID,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnInitLiveChargeMonitoringAsync(long _lngCTUserID, long _lngTransactionID, string _strConn) {
            this.fcnInitLiveChargeMonitoringAsync(_lngCTUserID, _lngTransactionID, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnInitLiveChargeMonitoringAsync(long _lngCTUserID, long _lngTransactionID, string _strConn, object userState) {
            if ((this.fcnInitLiveChargeMonitoringOperationCompleted == null)) {
                this.fcnInitLiveChargeMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnInitLiveChargeMonitoringOperationCompleted);
            }
            this.InvokeAsync("fcnInitLiveChargeMonitoring", new object[] {
                        _lngCTUserID,
                        _lngTransactionID,
                        _strConn}, this.fcnInitLiveChargeMonitoringOperationCompleted, userState);
        }
        
        private void OnfcnInitLiveChargeMonitoringOperationCompleted(object arg) {
            if ((this.fcnInitLiveChargeMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnInitLiveChargeMonitoringCompleted(this, new fcnInitLiveChargeMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnMonitorLocalLiveCharge", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnMonitorLocalLiveCharge(long _lngCTUserID, long _lngTransactionID, string _strConn) {
            object[] results = this.Invoke("fcnMonitorLocalLiveCharge", new object[] {
                        _lngCTUserID,
                        _lngTransactionID,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnMonitorLocalLiveChargeAsync(long _lngCTUserID, long _lngTransactionID, string _strConn) {
            this.fcnMonitorLocalLiveChargeAsync(_lngCTUserID, _lngTransactionID, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnMonitorLocalLiveChargeAsync(long _lngCTUserID, long _lngTransactionID, string _strConn, object userState) {
            if ((this.fcnMonitorLocalLiveChargeOperationCompleted == null)) {
                this.fcnMonitorLocalLiveChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnMonitorLocalLiveChargeOperationCompleted);
            }
            this.InvokeAsync("fcnMonitorLocalLiveCharge", new object[] {
                        _lngCTUserID,
                        _lngTransactionID,
                        _strConn}, this.fcnMonitorLocalLiveChargeOperationCompleted, userState);
        }
        
        private void OnfcnMonitorLocalLiveChargeOperationCompleted(object arg) {
            if ((this.fcnMonitorLocalLiveChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnMonitorLocalLiveChargeCompleted(this, new fcnMonitorLocalLiveChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitCustomFieldDefIR", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitCustomFieldDefIR(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitCustomFieldDefIR", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitCustomFieldDefIRAsync(string _strFileName, string _strConn) {
            this.fcnCommitCustomFieldDefIRAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitCustomFieldDefIRAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitCustomFieldDefIROperationCompleted == null)) {
                this.fcnCommitCustomFieldDefIROperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitCustomFieldDefIROperationCompleted);
            }
            this.InvokeAsync("fcnCommitCustomFieldDefIR", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitCustomFieldDefIROperationCompleted, userState);
        }
        
        private void OnfcnCommitCustomFieldDefIROperationCompleted(object arg) {
            if ((this.fcnCommitCustomFieldDefIRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitCustomFieldDefIRCompleted(this, new fcnCommitCustomFieldDefIRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitCustomFieldDefReg", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitCustomFieldDefReg(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitCustomFieldDefReg", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitCustomFieldDefRegAsync(string _strFileName, string _strConn) {
            this.fcnCommitCustomFieldDefRegAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitCustomFieldDefRegAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitCustomFieldDefRegOperationCompleted == null)) {
                this.fcnCommitCustomFieldDefRegOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitCustomFieldDefRegOperationCompleted);
            }
            this.InvokeAsync("fcnCommitCustomFieldDefReg", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitCustomFieldDefRegOperationCompleted, userState);
        }
        
        private void OnfcnCommitCustomFieldDefRegOperationCompleted(object arg) {
            if ((this.fcnCommitCustomFieldDefRegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitCustomFieldDefRegCompleted(this, new fcnCommitCustomFieldDefRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitWebFlagDefs", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitWebFlagDefs(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitWebFlagDefs", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitWebFlagDefsAsync(string _strFileName, string _strConn) {
            this.fcnCommitWebFlagDefsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitWebFlagDefsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitWebFlagDefsOperationCompleted == null)) {
                this.fcnCommitWebFlagDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitWebFlagDefsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitWebFlagDefs", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitWebFlagDefsOperationCompleted, userState);
        }
        
        private void OnfcnCommitWebFlagDefsOperationCompleted(object arg) {
            if ((this.fcnCommitWebFlagDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitWebFlagDefsCompleted(this, new fcnCommitWebFlagDefsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitIRs", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitIRs(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitIRs", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitIRsAsync(string _strFileName, string _strConn) {
            this.fcnCommitIRsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitIRsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitIRsOperationCompleted == null)) {
                this.fcnCommitIRsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitIRsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitIRs", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitIRsOperationCompleted, userState);
        }
        
        private void OnfcnCommitIRsOperationCompleted(object arg) {
            if ((this.fcnCommitIRsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitIRsCompleted(this, new fcnCommitIRsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnGetCustomData", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnGetCustomData(string _strFileName, string _strConn, long _lngCTUserID) {
            object[] results = this.Invoke("fcnGetCustomData", new object[] {
                        _strFileName,
                        _strConn,
                        _lngCTUserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnGetCustomDataAsync(string _strFileName, string _strConn, long _lngCTUserID) {
            this.fcnGetCustomDataAsync(_strFileName, _strConn, _lngCTUserID, null);
        }
        
        /// <remarks/>
        public void fcnGetCustomDataAsync(string _strFileName, string _strConn, long _lngCTUserID, object userState) {
            if ((this.fcnGetCustomDataOperationCompleted == null)) {
                this.fcnGetCustomDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnGetCustomDataOperationCompleted);
            }
            this.InvokeAsync("fcnGetCustomData", new object[] {
                        _strFileName,
                        _strConn,
                        _lngCTUserID}, this.fcnGetCustomDataOperationCompleted, userState);
        }
        
        private void OnfcnGetCustomDataOperationCompleted(object arg) {
            if ((this.fcnGetCustomDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnGetCustomDataCompleted(this, new fcnGetCustomDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitMORs", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitMORs(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitMORs", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitMORsAsync(string _strFileName, string _strConn) {
            this.fcnCommitMORsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitMORsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitMORsOperationCompleted == null)) {
                this.fcnCommitMORsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitMORsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitMORs", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitMORsOperationCompleted, userState);
        }
        
        private void OnfcnCommitMORsOperationCompleted(object arg) {
            if ((this.fcnCommitMORsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitMORsCompleted(this, new fcnCommitMORsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitMORIRs", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitMORIRs(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitMORIRs", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitMORIRsAsync(string _strFileName, string _strConn) {
            this.fcnCommitMORIRsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitMORIRsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitMORIRsOperationCompleted == null)) {
                this.fcnCommitMORIRsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitMORIRsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitMORIRs", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitMORIRsOperationCompleted, userState);
        }
        
        private void OnfcnCommitMORIRsOperationCompleted(object arg) {
            if ((this.fcnCommitMORIRsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitMORIRsCompleted(this, new fcnCommitMORIRsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitRegistrations", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitRegistrations(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitRegistrations", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitRegistrationsAsync(string _strFileName, string _strConn) {
            this.fcnCommitRegistrationsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitRegistrationsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitRegistrationsOperationCompleted == null)) {
                this.fcnCommitRegistrationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitRegistrationsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitRegistrations", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitRegistrationsOperationCompleted, userState);
        }
        
        private void OnfcnCommitRegistrationsOperationCompleted(object arg) {
            if ((this.fcnCommitRegistrationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitRegistrationsCompleted(this, new fcnCommitRegistrationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitTransactions", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitTransactions(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitTransactions", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitTransactionsAsync(string _strFileName, string _strConn) {
            this.fcnCommitTransactionsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitTransactionsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitTransactionsOperationCompleted == null)) {
                this.fcnCommitTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitTransactionsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitTransactions", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitTransactionsOperationCompleted, userState);
        }
        
        private void OnfcnCommitTransactionsOperationCompleted(object arg) {
            if ((this.fcnCommitTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitTransactionsCompleted(this, new fcnCommitTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitTransTypes", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitTransTypes(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitTransTypes", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitTransTypesAsync(string _strFileName, string _strConn) {
            this.fcnCommitTransTypesAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitTransTypesAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitTransTypesOperationCompleted == null)) {
                this.fcnCommitTransTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitTransTypesOperationCompleted);
            }
            this.InvokeAsync("fcnCommitTransTypes", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitTransTypesOperationCompleted, userState);
        }
        
        private void OnfcnCommitTransTypesOperationCompleted(object arg) {
            if ((this.fcnCommitTransTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitTransTypesCompleted(this, new fcnCommitTransTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitCTUsers", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitCTUsers(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitCTUsers", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitCTUsersAsync(string _strFileName, string _strConn) {
            this.fcnCommitCTUsersAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitCTUsersAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitCTUsersOperationCompleted == null)) {
                this.fcnCommitCTUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitCTUsersOperationCompleted);
            }
            this.InvokeAsync("fcnCommitCTUsers", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitCTUsersOperationCompleted, userState);
        }
        
        private void OnfcnCommitCTUsersOperationCompleted(object arg) {
            if ((this.fcnCommitCTUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitCTUsersCompleted(this, new fcnCommitCTUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitWebDiscounts", RequestElementName="fcnCommitWebDiscounts", RequestNamespace="https://www.camptrak.com/", ResponseElementName="fcnCommitWebDiscountsResponse", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fcnCommitWebDiscountsResult")]
        public string fcnCommitDiscountDefs(string _strFileName, string _strConn) {
            object[] results = this.Invoke("fcnCommitDiscountDefs", new object[] {
                        _strFileName,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitDiscountDefsAsync(string _strFileName, string _strConn) {
            this.fcnCommitDiscountDefsAsync(_strFileName, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitDiscountDefsAsync(string _strFileName, string _strConn, object userState) {
            if ((this.fcnCommitDiscountDefsOperationCompleted == null)) {
                this.fcnCommitDiscountDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitDiscountDefsOperationCompleted);
            }
            this.InvokeAsync("fcnCommitDiscountDefs", new object[] {
                        _strFileName,
                        _strConn}, this.fcnCommitDiscountDefsOperationCompleted, userState);
        }
        
        private void OnfcnCommitDiscountDefsOperationCompleted(object arg) {
            if ((this.fcnCommitDiscountDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitDiscountDefsCompleted(this, new fcnCommitDiscountDefsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnCommitMsgImgUL", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string fcnCommitMsgImgUL(string _strImgFile, long _lngCTUserID, long _lngWeekID, long _lngCampID, long _lngHousingID, string _strConn) {
            object[] results = this.Invoke("fcnCommitMsgImgUL", new object[] {
                        _strImgFile,
                        _lngCTUserID,
                        _lngWeekID,
                        _lngCampID,
                        _lngHousingID,
                        _strConn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fcnCommitMsgImgULAsync(string _strImgFile, long _lngCTUserID, long _lngWeekID, long _lngCampID, long _lngHousingID, string _strConn) {
            this.fcnCommitMsgImgULAsync(_strImgFile, _lngCTUserID, _lngWeekID, _lngCampID, _lngHousingID, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnCommitMsgImgULAsync(string _strImgFile, long _lngCTUserID, long _lngWeekID, long _lngCampID, long _lngHousingID, string _strConn, object userState) {
            if ((this.fcnCommitMsgImgULOperationCompleted == null)) {
                this.fcnCommitMsgImgULOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnCommitMsgImgULOperationCompleted);
            }
            this.InvokeAsync("fcnCommitMsgImgUL", new object[] {
                        _strImgFile,
                        _lngCTUserID,
                        _lngWeekID,
                        _lngCampID,
                        _lngHousingID,
                        _strConn}, this.fcnCommitMsgImgULOperationCompleted, userState);
        }
        
        private void OnfcnCommitMsgImgULOperationCompleted(object arg) {
            if ((this.fcnCommitMsgImgULCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnCommitMsgImgULCompleted(this, new fcnCommitMsgImgULCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnSetExcludeFromGeneral", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool fcnSetExcludeFromGeneral(long _lngCTUserID, long _lngCampID, bool _blnExcludeFromGeneral, string _strConn) {
            object[] results = this.Invoke("fcnSetExcludeFromGeneral", new object[] {
                        _lngCTUserID,
                        _lngCampID,
                        _blnExcludeFromGeneral,
                        _strConn});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnSetExcludeFromGeneralAsync(long _lngCTUserID, long _lngCampID, bool _blnExcludeFromGeneral, string _strConn) {
            this.fcnSetExcludeFromGeneralAsync(_lngCTUserID, _lngCampID, _blnExcludeFromGeneral, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnSetExcludeFromGeneralAsync(long _lngCTUserID, long _lngCampID, bool _blnExcludeFromGeneral, string _strConn, object userState) {
            if ((this.fcnSetExcludeFromGeneralOperationCompleted == null)) {
                this.fcnSetExcludeFromGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnSetExcludeFromGeneralOperationCompleted);
            }
            this.InvokeAsync("fcnSetExcludeFromGeneral", new object[] {
                        _lngCTUserID,
                        _lngCampID,
                        _blnExcludeFromGeneral,
                        _strConn}, this.fcnSetExcludeFromGeneralOperationCompleted, userState);
        }
        
        private void OnfcnSetExcludeFromGeneralOperationCompleted(object arg) {
            if ((this.fcnSetExcludeFromGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnSetExcludeFromGeneralCompleted(this, new fcnSetExcludeFromGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.camptrak.com/fcnGetMultRegFlagCharge", RequestNamespace="https://www.camptrak.com/", ResponseNamespace="https://www.camptrak.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool fcnGetMultRegFlagCharge(long _lngCTUserID, string _strConn) {
            object[] results = this.Invoke("fcnGetMultRegFlagCharge", new object[] {
                        _lngCTUserID,
                        _strConn});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void fcnGetMultRegFlagChargeAsync(long _lngCTUserID, string _strConn) {
            this.fcnGetMultRegFlagChargeAsync(_lngCTUserID, _strConn, null);
        }
        
        /// <remarks/>
        public void fcnGetMultRegFlagChargeAsync(long _lngCTUserID, string _strConn, object userState) {
            if ((this.fcnGetMultRegFlagChargeOperationCompleted == null)) {
                this.fcnGetMultRegFlagChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfcnGetMultRegFlagChargeOperationCompleted);
            }
            this.InvokeAsync("fcnGetMultRegFlagCharge", new object[] {
                        _lngCTUserID,
                        _strConn}, this.fcnGetMultRegFlagChargeOperationCompleted, userState);
        }
        
        private void OnfcnGetMultRegFlagChargeOperationCompleted(object arg) {
            if ((this.fcnGetMultRegFlagChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fcnGetMultRegFlagChargeCompleted(this, new fcnGetMultRegFlagChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnTestCompletedEventHandler(object sender, fcnTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnClearErrsCompletedEventHandler(object sender, fcnClearErrsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnClearErrsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnClearErrsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnClearErrs1CompletedEventHandler(object sender, fcnClearErrs1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnClearErrs1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnClearErrs1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUpdateDLStatusCompletedEventHandler(object sender, fcnUpdateDLStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUpdateDLStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUpdateDLStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUpdateDLStatus1CompletedEventHandler(object sender, fcnUpdateDLStatus1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUpdateDLStatus1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUpdateDLStatus1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUpdateDLStatus2CompletedEventHandler(object sender, fcnUpdateDLStatus2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUpdateDLStatus2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUpdateDLStatus2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUpdateDLStatusWErrCompletedEventHandler(object sender, fcnUpdateDLStatusWErrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUpdateDLStatusWErrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUpdateDLStatusWErrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnGetRecordsCompletedEventHandler(object sender, fcnGetRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnGetRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnGetRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnGetRecordsXMLCompletedEventHandler(object sender, fcnGetRecordsXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnGetRecordsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnGetRecordsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnGetRecords1CompletedEventHandler(object sender, fcnGetRecords1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnGetRecords1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnGetRecords1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnDLResCompletedEventHandler(object sender, fcnDLResCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnDLResCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnDLResCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnDLRes1CompletedEventHandler(object sender, fcnDLRes1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnDLRes1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnDLRes1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnProcessCTXMLUploadCompletedEventHandler(object sender, fcnProcessCTXMLUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnProcessCTXMLUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnProcessCTXMLUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnProcessCTXMLUpload1CompletedEventHandler(object sender, fcnProcessCTXMLUpload1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnProcessCTXMLUpload1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnProcessCTXMLUpload1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnProcessCTXMLUpload2CompletedEventHandler(object sender, fcnProcessCTXMLUpload2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnProcessCTXMLUpload2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnProcessCTXMLUpload2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnAddIntCompletedEventHandler(object sender, fcnAddIntCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnAddIntCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnAddIntCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnMarkWebCamperAsRetrievedCompletedEventHandler(object sender, fcnMarkWebCamperAsRetrievedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnMarkWebCamperAsRetrievedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnMarkWebCamperAsRetrievedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnProcessIRUploadCompletedEventHandler(object sender, fcnProcessIRUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnProcessIRUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnProcessIRUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUpdateDefaultCompletedEventHandler(object sender, fcnUpdateDefaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUpdateDefaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUpdateDefaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUpdateCustomValCompletedEventHandler(object sender, fcnUpdateCustomValCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUpdateCustomValCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUpdateCustomValCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnProcessCTXMLUploadToTblCompletedEventHandler(object sender, fcnProcessCTXMLUploadToTblCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnProcessCTXMLUploadToTblCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnProcessCTXMLUploadToTblCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUploadDataCompletedEventHandler(object sender, fcnUploadDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUploadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUploadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUploadData1CompletedEventHandler(object sender, fcnUploadData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUploadData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUploadData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnUploadDataNoUpdateCompletedEventHandler(object sender, fcnUploadDataNoUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnUploadDataNoUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnUploadDataNoUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnInitLiveChargeMonitoringCompletedEventHandler(object sender, fcnInitLiveChargeMonitoringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnInitLiveChargeMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnInitLiveChargeMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnMonitorLocalLiveChargeCompletedEventHandler(object sender, fcnMonitorLocalLiveChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnMonitorLocalLiveChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnMonitorLocalLiveChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitCustomFieldDefIRCompletedEventHandler(object sender, fcnCommitCustomFieldDefIRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitCustomFieldDefIRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitCustomFieldDefIRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitCustomFieldDefRegCompletedEventHandler(object sender, fcnCommitCustomFieldDefRegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitCustomFieldDefRegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitCustomFieldDefRegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitWebFlagDefsCompletedEventHandler(object sender, fcnCommitWebFlagDefsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitWebFlagDefsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitWebFlagDefsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitIRsCompletedEventHandler(object sender, fcnCommitIRsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitIRsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitIRsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnGetCustomDataCompletedEventHandler(object sender, fcnGetCustomDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnGetCustomDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnGetCustomDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitMORsCompletedEventHandler(object sender, fcnCommitMORsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitMORsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitMORsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitMORIRsCompletedEventHandler(object sender, fcnCommitMORIRsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitMORIRsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitMORIRsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitRegistrationsCompletedEventHandler(object sender, fcnCommitRegistrationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitRegistrationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitRegistrationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitTransactionsCompletedEventHandler(object sender, fcnCommitTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitTransTypesCompletedEventHandler(object sender, fcnCommitTransTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitTransTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitTransTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitCTUsersCompletedEventHandler(object sender, fcnCommitCTUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitCTUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitCTUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitDiscountDefsCompletedEventHandler(object sender, fcnCommitDiscountDefsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitDiscountDefsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitDiscountDefsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnCommitMsgImgULCompletedEventHandler(object sender, fcnCommitMsgImgULCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnCommitMsgImgULCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnCommitMsgImgULCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnSetExcludeFromGeneralCompletedEventHandler(object sender, fcnSetExcludeFromGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnSetExcludeFromGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnSetExcludeFromGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void fcnGetMultRegFlagChargeCompletedEventHandler(object sender, fcnGetMultRegFlagChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fcnGetMultRegFlagChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fcnGetMultRegFlagChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591