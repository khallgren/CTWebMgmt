//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace CTWebMgmt.wsCashLinq {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CQSoap", Namespace="https://dlq4.donatelinq.net/")]
    public partial class CQ : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback MerchLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReconciled_RepeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReconciledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFailedsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReturnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RepeatSaleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback SecureSubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrxDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrxHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCCExpirationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEFT_FailuresOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEFT_NOCOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CQ() {
            this.Url = global::CTWebMgmt.Properties.Settings.Default.CTWebMgmt_wsCashLinq_CQ;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event MerchLoginCompletedEventHandler MerchLoginCompleted;
        
        /// <remarks/>
        public event GetReconciled_RepeatCompletedEventHandler GetReconciled_RepeatCompleted;
        
        /// <remarks/>
        public event GetReconciledCompletedEventHandler GetReconciledCompleted;
        
        /// <remarks/>
        public event GetFailedsCompletedEventHandler GetFailedsCompleted;
        
        /// <remarks/>
        public event GetReturnsCompletedEventHandler GetReturnsCompleted;
        
        /// <remarks/>
        public event ExportDataCompletedEventHandler ExportDataCompleted;
        
        /// <remarks/>
        public event RepeatSaleCompletedEventHandler RepeatSaleCompleted;
        
        /// <remarks/>
        public event RefundCompletedEventHandler RefundCompleted;
        
        /// <remarks/>
        public event SecureSubmitCompletedEventHandler SecureSubmitCompleted;
        
        /// <remarks/>
        public event GetTrxDataCompletedEventHandler GetTrxDataCompleted;
        
        /// <remarks/>
        public event GetTrxHistoryCompletedEventHandler GetTrxHistoryCompleted;
        
        /// <remarks/>
        public event UpdatePaymentCompletedEventHandler UpdatePaymentCompleted;
        
        /// <remarks/>
        public event UpdateCCExpirationCompletedEventHandler UpdateCCExpirationCompleted;
        
        /// <remarks/>
        public event UpdatePayerCompletedEventHandler UpdatePayerCompleted;
        
        /// <remarks/>
        public event CancelTransactionCompletedEventHandler CancelTransactionCompleted;
        
        /// <remarks/>
        public event GetEFT_FailuresCompletedEventHandler GetEFT_FailuresCompleted;
        
        /// <remarks/>
        public event GetEFT_NOCCompletedEventHandler GetEFT_NOCCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/MerchLogin", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MerchLogin(string UserName, string Password, string MerchID) {
            object[] results = this.Invoke("MerchLogin", new object[] {
                        UserName,
                        Password,
                        MerchID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MerchLoginAsync(string UserName, string Password, string MerchID) {
            this.MerchLoginAsync(UserName, Password, MerchID, null);
        }
        
        /// <remarks/>
        public void MerchLoginAsync(string UserName, string Password, string MerchID, object userState) {
            if ((this.MerchLoginOperationCompleted == null)) {
                this.MerchLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMerchLoginOperationCompleted);
            }
            this.InvokeAsync("MerchLogin", new object[] {
                        UserName,
                        Password,
                        MerchID}, this.MerchLoginOperationCompleted, userState);
        }
        
        private void OnMerchLoginOperationCompleted(object arg) {
            if ((this.MerchLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MerchLoginCompleted(this, new MerchLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetReconciled_Repeat", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReconciled_Repeat(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetReconciled_Repeat", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReconciled_RepeatAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetReconciled_RepeatAsync(UserID, UserType, UserSecureToken, PageName, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetReconciled_RepeatAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetReconciled_RepeatOperationCompleted == null)) {
                this.GetReconciled_RepeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReconciled_RepeatOperationCompleted);
            }
            this.InvokeAsync("GetReconciled_Repeat", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate}, this.GetReconciled_RepeatOperationCompleted, userState);
        }
        
        private void OnGetReconciled_RepeatOperationCompleted(object arg) {
            if ((this.GetReconciled_RepeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReconciled_RepeatCompleted(this, new GetReconciled_RepeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetReconciled", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReconciled(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetReconciled", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReconciledAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetReconciledAsync(UserID, UserType, UserSecureToken, PageName, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetReconciledAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetReconciledOperationCompleted == null)) {
                this.GetReconciledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReconciledOperationCompleted);
            }
            this.InvokeAsync("GetReconciled", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate}, this.GetReconciledOperationCompleted, userState);
        }
        
        private void OnGetReconciledOperationCompleted(object arg) {
            if ((this.GetReconciledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReconciledCompleted(this, new GetReconciledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetFaileds", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFaileds(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetFaileds", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFailedsAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetFailedsAsync(UserID, UserType, UserSecureToken, PageName, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetFailedsAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetFailedsOperationCompleted == null)) {
                this.GetFailedsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFailedsOperationCompleted);
            }
            this.InvokeAsync("GetFaileds", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate}, this.GetFailedsOperationCompleted, userState);
        }
        
        private void OnGetFailedsOperationCompleted(object arg) {
            if ((this.GetFailedsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFailedsCompleted(this, new GetFailedsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetReturns", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReturns(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetReturns", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReturnsAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            this.GetReturnsAsync(UserID, UserType, UserSecureToken, PageName, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetReturnsAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetReturnsOperationCompleted == null)) {
                this.GetReturnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReturnsOperationCompleted);
            }
            this.InvokeAsync("GetReturns", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate}, this.GetReturnsOperationCompleted, userState);
        }
        
        private void OnGetReturnsOperationCompleted(object arg) {
            if ((this.GetReturnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReturnsCompleted(this, new GetReturnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/ExportData", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportData(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("ExportData", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportDataAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate) {
            this.ExportDataAsync(UserID, UserType, UserSecureToken, PageName, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void ExportDataAsync(long UserID, byte UserType, string UserSecureToken, string PageName, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.ExportDataOperationCompleted == null)) {
                this.ExportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportDataOperationCompleted);
            }
            this.InvokeAsync("ExportData", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PageName,
                        StartDate,
                        EndDate}, this.ExportDataOperationCompleted, userState);
        }
        
        private void OnExportDataOperationCompleted(object arg) {
            if ((this.ExportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportDataCompleted(this, new ExportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/RepeatSale", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response RepeatSale(long UserID, byte UserType, string UserSecureToken, long TransID, decimal Amount, System.DateTime ScheduledDate) {
            object[] results = this.Invoke("RepeatSale", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        TransID,
                        Amount,
                        ScheduledDate});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void RepeatSaleAsync(long UserID, byte UserType, string UserSecureToken, long TransID, decimal Amount, System.DateTime ScheduledDate) {
            this.RepeatSaleAsync(UserID, UserType, UserSecureToken, TransID, Amount, ScheduledDate, null);
        }
        
        /// <remarks/>
        public void RepeatSaleAsync(long UserID, byte UserType, string UserSecureToken, long TransID, decimal Amount, System.DateTime ScheduledDate, object userState) {
            if ((this.RepeatSaleOperationCompleted == null)) {
                this.RepeatSaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRepeatSaleOperationCompleted);
            }
            this.InvokeAsync("RepeatSale", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        TransID,
                        Amount,
                        ScheduledDate}, this.RepeatSaleOperationCompleted, userState);
        }
        
        private void OnRepeatSaleOperationCompleted(object arg) {
            if ((this.RepeatSaleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RepeatSaleCompleted(this, new RepeatSaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/Refund", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response Refund(long UserID, byte UserType, string UserSecureToken, long TransID, decimal Amount, string Reason) {
            object[] results = this.Invoke("Refund", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        TransID,
                        Amount,
                        Reason});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void RefundAsync(long UserID, byte UserType, string UserSecureToken, long TransID, decimal Amount, string Reason) {
            this.RefundAsync(UserID, UserType, UserSecureToken, TransID, Amount, Reason, null);
        }
        
        /// <remarks/>
        public void RefundAsync(long UserID, byte UserType, string UserSecureToken, long TransID, decimal Amount, string Reason, object userState) {
            if ((this.RefundOperationCompleted == null)) {
                this.RefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundOperationCompleted);
            }
            this.InvokeAsync("Refund", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        TransID,
                        Amount,
                        Reason}, this.RefundOperationCompleted, userState);
        }
        
        private void OnRefundOperationCompleted(object arg) {
            if ((this.RefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundCompleted(this, new RefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/SecureSubmit", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SecureSubmit(string pagename, string q_login, string name_value) {
            object[] results = this.Invoke("SecureSubmit", new object[] {
                        pagename,
                        q_login,
                        name_value});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SecureSubmitAsync(string pagename, string q_login, string name_value) {
            this.SecureSubmitAsync(pagename, q_login, name_value, null);
        }
        
        /// <remarks/>
        public void SecureSubmitAsync(string pagename, string q_login, string name_value, object userState) {
            if ((this.SecureSubmitOperationCompleted == null)) {
                this.SecureSubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSecureSubmitOperationCompleted);
            }
            this.InvokeAsync("SecureSubmit", new object[] {
                        pagename,
                        q_login,
                        name_value}, this.SecureSubmitOperationCompleted, userState);
        }
        
        private void OnSecureSubmitOperationCompleted(object arg) {
            if ((this.SecureSubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SecureSubmitCompleted(this, new SecureSubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetTrxData", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTrxData(long UserID, byte UserType, string UserSecureToken, string pnref) {
            object[] results = this.Invoke("GetTrxData", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        pnref});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrxDataAsync(long UserID, byte UserType, string UserSecureToken, string pnref) {
            this.GetTrxDataAsync(UserID, UserType, UserSecureToken, pnref, null);
        }
        
        /// <remarks/>
        public void GetTrxDataAsync(long UserID, byte UserType, string UserSecureToken, string pnref, object userState) {
            if ((this.GetTrxDataOperationCompleted == null)) {
                this.GetTrxDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrxDataOperationCompleted);
            }
            this.InvokeAsync("GetTrxData", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        pnref}, this.GetTrxDataOperationCompleted, userState);
        }
        
        private void OnGetTrxDataOperationCompleted(object arg) {
            if ((this.GetTrxDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrxDataCompleted(this, new GetTrxDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetTrxHistory", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTrxHistory(long UserID, byte UserType, string UserSecureToken, string pnref) {
            object[] results = this.Invoke("GetTrxHistory", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        pnref});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrxHistoryAsync(long UserID, byte UserType, string UserSecureToken, string pnref) {
            this.GetTrxHistoryAsync(UserID, UserType, UserSecureToken, pnref, null);
        }
        
        /// <remarks/>
        public void GetTrxHistoryAsync(long UserID, byte UserType, string UserSecureToken, string pnref, object userState) {
            if ((this.GetTrxHistoryOperationCompleted == null)) {
                this.GetTrxHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrxHistoryOperationCompleted);
            }
            this.InvokeAsync("GetTrxHistory", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        pnref}, this.GetTrxHistoryOperationCompleted, userState);
        }
        
        private void OnGetTrxHistoryOperationCompleted(object arg) {
            if ((this.GetTrxHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrxHistoryCompleted(this, new GetTrxHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/UpdatePayment", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePayment(long UserID, byte UserType, string UserSecureToken, long PNREF, System.DateTime Start_Date, string Repeat_Time, short Number_Of_Payments, decimal Amount) {
            object[] results = this.Invoke("UpdatePayment", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF,
                        Start_Date,
                        Repeat_Time,
                        Number_Of_Payments,
                        Amount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePaymentAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, System.DateTime Start_Date, string Repeat_Time, short Number_Of_Payments, decimal Amount) {
            this.UpdatePaymentAsync(UserID, UserType, UserSecureToken, PNREF, Start_Date, Repeat_Time, Number_Of_Payments, Amount, null);
        }
        
        /// <remarks/>
        public void UpdatePaymentAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, System.DateTime Start_Date, string Repeat_Time, short Number_Of_Payments, decimal Amount, object userState) {
            if ((this.UpdatePaymentOperationCompleted == null)) {
                this.UpdatePaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePaymentOperationCompleted);
            }
            this.InvokeAsync("UpdatePayment", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF,
                        Start_Date,
                        Repeat_Time,
                        Number_Of_Payments,
                        Amount}, this.UpdatePaymentOperationCompleted, userState);
        }
        
        private void OnUpdatePaymentOperationCompleted(object arg) {
            if ((this.UpdatePaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePaymentCompleted(this, new UpdatePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/UpdateCCExpiration", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCCExpiration(long UserID, byte UserType, string UserSecureToken, long PNREF, int Month, int Year) {
            object[] results = this.Invoke("UpdateCCExpiration", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF,
                        Month,
                        Year});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCCExpirationAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, int Month, int Year) {
            this.UpdateCCExpirationAsync(UserID, UserType, UserSecureToken, PNREF, Month, Year, null);
        }
        
        /// <remarks/>
        public void UpdateCCExpirationAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, int Month, int Year, object userState) {
            if ((this.UpdateCCExpirationOperationCompleted == null)) {
                this.UpdateCCExpirationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCCExpirationOperationCompleted);
            }
            this.InvokeAsync("UpdateCCExpiration", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF,
                        Month,
                        Year}, this.UpdateCCExpirationOperationCompleted, userState);
        }
        
        private void OnUpdateCCExpirationOperationCompleted(object arg) {
            if ((this.UpdateCCExpirationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCCExpirationCompleted(this, new UpdateCCExpirationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/UpdatePayer", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePayer(long UserID, byte UserType, string UserSecureToken, long PNREF, string FName, string LName, string Addr1, string Addr2, string City, string State, string Zip, string Phone, string Email) {
            object[] results = this.Invoke("UpdatePayer", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF,
                        FName,
                        LName,
                        Addr1,
                        Addr2,
                        City,
                        State,
                        Zip,
                        Phone,
                        Email});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePayerAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, string FName, string LName, string Addr1, string Addr2, string City, string State, string Zip, string Phone, string Email) {
            this.UpdatePayerAsync(UserID, UserType, UserSecureToken, PNREF, FName, LName, Addr1, Addr2, City, State, Zip, Phone, Email, null);
        }
        
        /// <remarks/>
        public void UpdatePayerAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, string FName, string LName, string Addr1, string Addr2, string City, string State, string Zip, string Phone, string Email, object userState) {
            if ((this.UpdatePayerOperationCompleted == null)) {
                this.UpdatePayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePayerOperationCompleted);
            }
            this.InvokeAsync("UpdatePayer", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF,
                        FName,
                        LName,
                        Addr1,
                        Addr2,
                        City,
                        State,
                        Zip,
                        Phone,
                        Email}, this.UpdatePayerOperationCompleted, userState);
        }
        
        private void OnUpdatePayerOperationCompleted(object arg) {
            if ((this.UpdatePayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePayerCompleted(this, new UpdatePayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/CancelTransaction", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelTransaction(long UserID, byte UserType, string UserSecureToken, long PNREF) {
            object[] results = this.Invoke("CancelTransaction", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelTransactionAsync(long UserID, byte UserType, string UserSecureToken, long PNREF) {
            this.CancelTransactionAsync(UserID, UserType, UserSecureToken, PNREF, null);
        }
        
        /// <remarks/>
        public void CancelTransactionAsync(long UserID, byte UserType, string UserSecureToken, long PNREF, object userState) {
            if ((this.CancelTransactionOperationCompleted == null)) {
                this.CancelTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelTransactionOperationCompleted);
            }
            this.InvokeAsync("CancelTransaction", new object[] {
                        UserID,
                        UserType,
                        UserSecureToken,
                        PNREF}, this.CancelTransactionOperationCompleted, userState);
        }
        
        private void OnCancelTransactionOperationCompleted(object arg) {
            if ((this.CancelTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelTransactionCompleted(this, new CancelTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetEFT_Failures", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEFT_Failures(System.DateTime startdate, System.DateTime enddate, int GatewayKey) {
            object[] results = this.Invoke("GetEFT_Failures", new object[] {
                        startdate,
                        enddate,
                        GatewayKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEFT_FailuresAsync(System.DateTime startdate, System.DateTime enddate, int GatewayKey) {
            this.GetEFT_FailuresAsync(startdate, enddate, GatewayKey, null);
        }
        
        /// <remarks/>
        public void GetEFT_FailuresAsync(System.DateTime startdate, System.DateTime enddate, int GatewayKey, object userState) {
            if ((this.GetEFT_FailuresOperationCompleted == null)) {
                this.GetEFT_FailuresOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEFT_FailuresOperationCompleted);
            }
            this.InvokeAsync("GetEFT_Failures", new object[] {
                        startdate,
                        enddate,
                        GatewayKey}, this.GetEFT_FailuresOperationCompleted, userState);
        }
        
        private void OnGetEFT_FailuresOperationCompleted(object arg) {
            if ((this.GetEFT_FailuresCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEFT_FailuresCompleted(this, new GetEFT_FailuresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://dlq4.donatelinq.net/GetEFT_NOC", RequestNamespace="https://dlq4.donatelinq.net/", ResponseNamespace="https://dlq4.donatelinq.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEFT_NOC(System.DateTime startdate, System.DateTime enddate, int GatewayKey) {
            object[] results = this.Invoke("GetEFT_NOC", new object[] {
                        startdate,
                        enddate,
                        GatewayKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEFT_NOCAsync(System.DateTime startdate, System.DateTime enddate, int GatewayKey) {
            this.GetEFT_NOCAsync(startdate, enddate, GatewayKey, null);
        }
        
        /// <remarks/>
        public void GetEFT_NOCAsync(System.DateTime startdate, System.DateTime enddate, int GatewayKey, object userState) {
            if ((this.GetEFT_NOCOperationCompleted == null)) {
                this.GetEFT_NOCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEFT_NOCOperationCompleted);
            }
            this.InvokeAsync("GetEFT_NOC", new object[] {
                        startdate,
                        enddate,
                        GatewayKey}, this.GetEFT_NOCOperationCompleted, userState);
        }
        
        private void OnGetEFT_NOCOperationCompleted(object arg) {
            if ((this.GetEFT_NOCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEFT_NOCCompleted(this, new GetEFT_NOCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://dlq4.donatelinq.net/")]
    public partial class Response {
        
        private string authCodeField;
        
        private string extDataField;
        
        private string getAVSResultField;
        
        private string getAVSResultTXTField;
        
        private string getCommercialCardField;
        
        private string getCVResultField;
        
        private string getCVResultTXTField;
        
        private string getGetOrigResultField;
        
        private string getStreetMatchTXTField;
        
        private string getZipMatchTXTField;
        
        private string hostCodeField;
        
        private string hostURLField;
        
        private string keyPointerField;
        
        private string messageField;
        
        private string message1Field;
        
        private string message2Field;
        
        private string pNRefField;
        
        private string receiptURLField;
        
        private string respMSGField;
        
        private int resultField;
        
        private string workingKeyField;
        
        /// <remarks/>
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ExtData {
            get {
                return this.extDataField;
            }
            set {
                this.extDataField = value;
            }
        }
        
        /// <remarks/>
        public string GetAVSResult {
            get {
                return this.getAVSResultField;
            }
            set {
                this.getAVSResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetAVSResultTXT {
            get {
                return this.getAVSResultTXTField;
            }
            set {
                this.getAVSResultTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetCommercialCard {
            get {
                return this.getCommercialCardField;
            }
            set {
                this.getCommercialCardField = value;
            }
        }
        
        /// <remarks/>
        public string GetCVResult {
            get {
                return this.getCVResultField;
            }
            set {
                this.getCVResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetCVResultTXT {
            get {
                return this.getCVResultTXTField;
            }
            set {
                this.getCVResultTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetGetOrigResult {
            get {
                return this.getGetOrigResultField;
            }
            set {
                this.getGetOrigResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetStreetMatchTXT {
            get {
                return this.getStreetMatchTXTField;
            }
            set {
                this.getStreetMatchTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetZipMatchTXT {
            get {
                return this.getZipMatchTXTField;
            }
            set {
                this.getZipMatchTXTField = value;
            }
        }
        
        /// <remarks/>
        public string HostCode {
            get {
                return this.hostCodeField;
            }
            set {
                this.hostCodeField = value;
            }
        }
        
        /// <remarks/>
        public string HostURL {
            get {
                return this.hostURLField;
            }
            set {
                this.hostURLField = value;
            }
        }
        
        /// <remarks/>
        public string KeyPointer {
            get {
                return this.keyPointerField;
            }
            set {
                this.keyPointerField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Message1 {
            get {
                return this.message1Field;
            }
            set {
                this.message1Field = value;
            }
        }
        
        /// <remarks/>
        public string Message2 {
            get {
                return this.message2Field;
            }
            set {
                this.message2Field = value;
            }
        }
        
        /// <remarks/>
        public string PNRef {
            get {
                return this.pNRefField;
            }
            set {
                this.pNRefField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptURL {
            get {
                return this.receiptURLField;
            }
            set {
                this.receiptURLField = value;
            }
        }
        
        /// <remarks/>
        public string RespMSG {
            get {
                return this.respMSGField;
            }
            set {
                this.respMSGField = value;
            }
        }
        
        /// <remarks/>
        public int Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string WorkingKey {
            get {
                return this.workingKeyField;
            }
            set {
                this.workingKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void MerchLoginCompletedEventHandler(object sender, MerchLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MerchLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MerchLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetReconciled_RepeatCompletedEventHandler(object sender, GetReconciled_RepeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReconciled_RepeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReconciled_RepeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetReconciledCompletedEventHandler(object sender, GetReconciledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReconciledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReconciledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetFailedsCompletedEventHandler(object sender, GetFailedsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFailedsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFailedsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetReturnsCompletedEventHandler(object sender, GetReturnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReturnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReturnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExportDataCompletedEventHandler(object sender, ExportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RepeatSaleCompletedEventHandler(object sender, RepeatSaleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RepeatSaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RepeatSaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RefundCompletedEventHandler(object sender, RefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SecureSubmitCompletedEventHandler(object sender, SecureSubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SecureSubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SecureSubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTrxDataCompletedEventHandler(object sender, GetTrxDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrxDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrxDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTrxHistoryCompletedEventHandler(object sender, GetTrxHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrxHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrxHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdatePaymentCompletedEventHandler(object sender, UpdatePaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateCCExpirationCompletedEventHandler(object sender, UpdateCCExpirationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCCExpirationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCCExpirationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdatePayerCompletedEventHandler(object sender, UpdatePayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CancelTransactionCompletedEventHandler(object sender, CancelTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetEFT_FailuresCompletedEventHandler(object sender, GetEFT_FailuresCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEFT_FailuresCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEFT_FailuresCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetEFT_NOCCompletedEventHandler(object sender, GetEFT_NOCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEFT_NOCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEFT_NOCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591