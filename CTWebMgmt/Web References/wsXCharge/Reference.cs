//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace CTWebMgmt.wsXCharge {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CheckVerifySoap", Namespace="http://www.paymentresource.com/webservices/")]
    public partial class CheckVerify : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ACHCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHDebitOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHRecurringOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHVerifyCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHVerifyDebitOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHTransactionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHVoidTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHVerifyDebitRecurringOperationCompleted;
        
        private System.Threading.SendOrPostCallback ACHVerifyRecurringOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CheckVerify() {
            this.Url = global::CTWebMgmt.Properties.Settings.Default.CTWebMgmt_wsXCharge_CheckVerify;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ACHCreditCompletedEventHandler ACHCreditCompleted;
        
        /// <remarks/>
        public event ACHDebitCompletedEventHandler ACHDebitCompleted;
        
        /// <remarks/>
        public event ACHRecurringCompletedEventHandler ACHRecurringCompleted;
        
        /// <remarks/>
        public event ACHVerifyCompletedEventHandler ACHVerifyCompleted;
        
        /// <remarks/>
        public event ACHVerifyCreditCompletedEventHandler ACHVerifyCreditCompleted;
        
        /// <remarks/>
        public event ACHVerifyDebitCompletedEventHandler ACHVerifyDebitCompleted;
        
        /// <remarks/>
        public event ACHTransactionStatusCompletedEventHandler ACHTransactionStatusCompleted;
        
        /// <remarks/>
        public event ACHVoidTransactionCompletedEventHandler ACHVoidTransactionCompleted;
        
        /// <remarks/>
        public event GetTransactionDetailsCompletedEventHandler GetTransactionDetailsCompleted;
        
        /// <remarks/>
        public event ACHVerifyDebitRecurringCompletedEventHandler ACHVerifyDebitRecurringCompleted;
        
        /// <remarks/>
        public event ACHVerifyRecurringCompletedEventHandler ACHVerifyRecurringCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHCredit", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHCredit(string MerchantID, string RegKey, string RefID, decimal Amount, string TransRoute, string BankAccountNo, AccountType BankAccountType, string Name, string Address, string ZipCode, string ProcessDate, CheckType checkType, string Description) {
            object[] results = this.Invoke("ACHCredit", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        Amount,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        Name,
                        Address,
                        ZipCode,
                        ProcessDate,
                        checkType,
                        Description});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHCreditAsync(string MerchantID, string RegKey, string RefID, decimal Amount, string TransRoute, string BankAccountNo, AccountType BankAccountType, string Name, string Address, string ZipCode, string ProcessDate, CheckType checkType, string Description) {
            this.ACHCreditAsync(MerchantID, RegKey, RefID, Amount, TransRoute, BankAccountNo, BankAccountType, Name, Address, ZipCode, ProcessDate, checkType, Description, null);
        }
        
        /// <remarks/>
        public void ACHCreditAsync(string MerchantID, string RegKey, string RefID, decimal Amount, string TransRoute, string BankAccountNo, AccountType BankAccountType, string Name, string Address, string ZipCode, string ProcessDate, CheckType checkType, string Description, object userState) {
            if ((this.ACHCreditOperationCompleted == null)) {
                this.ACHCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHCreditOperationCompleted);
            }
            this.InvokeAsync("ACHCredit", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        Amount,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        Name,
                        Address,
                        ZipCode,
                        ProcessDate,
                        checkType,
                        Description}, this.ACHCreditOperationCompleted, userState);
        }
        
        private void OnACHCreditOperationCompleted(object arg) {
            if ((this.ACHCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHCreditCompleted(this, new ACHCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHDebit", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHDebit(string MerchantID, string RegKey, string RefID, decimal Amount, string TransRoute, string BankAccountNo, AccountType BankAccountType, string Name, string Address, string ZipCode, string ProcessDate, CheckType checkType, string Description) {
            object[] results = this.Invoke("ACHDebit", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        Amount,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        Name,
                        Address,
                        ZipCode,
                        ProcessDate,
                        checkType,
                        Description});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHDebitAsync(string MerchantID, string RegKey, string RefID, decimal Amount, string TransRoute, string BankAccountNo, AccountType BankAccountType, string Name, string Address, string ZipCode, string ProcessDate, CheckType checkType, string Description) {
            this.ACHDebitAsync(MerchantID, RegKey, RefID, Amount, TransRoute, BankAccountNo, BankAccountType, Name, Address, ZipCode, ProcessDate, checkType, Description, null);
        }
        
        /// <remarks/>
        public void ACHDebitAsync(string MerchantID, string RegKey, string RefID, decimal Amount, string TransRoute, string BankAccountNo, AccountType BankAccountType, string Name, string Address, string ZipCode, string ProcessDate, CheckType checkType, string Description, object userState) {
            if ((this.ACHDebitOperationCompleted == null)) {
                this.ACHDebitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHDebitOperationCompleted);
            }
            this.InvokeAsync("ACHDebit", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        Amount,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        Name,
                        Address,
                        ZipCode,
                        ProcessDate,
                        checkType,
                        Description}, this.ACHDebitOperationCompleted, userState);
        }
        
        private void OnACHDebitOperationCompleted(object arg) {
            if ((this.ACHDebitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHDebitCompleted(this, new ACHDebitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHRecurring", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecurringStatus ACHRecurring(
                    string MerchantID, 
                    string RegKey, 
                    string RefID, 
                    decimal Amount, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string NextProcessDate, 
                    int NumOfDebits, 
                    BillingCycles BillingCycle, 
                    string Name, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Phone, 
                    CheckType checkType) {
            object[] results = this.Invoke("ACHRecurring", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        Amount,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        NextProcessDate,
                        NumOfDebits,
                        BillingCycle,
                        Name,
                        Address,
                        City,
                        State,
                        ZipCode,
                        Phone,
                        checkType});
            return ((RecurringStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHRecurringAsync(
                    string MerchantID, 
                    string RegKey, 
                    string RefID, 
                    decimal Amount, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string NextProcessDate, 
                    int NumOfDebits, 
                    BillingCycles BillingCycle, 
                    string Name, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Phone, 
                    CheckType checkType) {
            this.ACHRecurringAsync(MerchantID, RegKey, RefID, Amount, TransRoute, BankAccountNo, BankAccountType, NextProcessDate, NumOfDebits, BillingCycle, Name, Address, City, State, ZipCode, Phone, checkType, null);
        }
        
        /// <remarks/>
        public void ACHRecurringAsync(
                    string MerchantID, 
                    string RegKey, 
                    string RefID, 
                    decimal Amount, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string NextProcessDate, 
                    int NumOfDebits, 
                    BillingCycles BillingCycle, 
                    string Name, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Phone, 
                    CheckType checkType, 
                    object userState) {
            if ((this.ACHRecurringOperationCompleted == null)) {
                this.ACHRecurringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHRecurringOperationCompleted);
            }
            this.InvokeAsync("ACHRecurring", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        Amount,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        NextProcessDate,
                        NumOfDebits,
                        BillingCycle,
                        Name,
                        Address,
                        City,
                        State,
                        ZipCode,
                        Phone,
                        checkType}, this.ACHRecurringOperationCompleted, userState);
        }
        
        private void OnACHRecurringOperationCompleted(object arg) {
            if ((this.ACHRecurringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHRecurringCompleted(this, new ACHRecurringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHVerify", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHVerify(string MerchantID, string RegKey, string NctID, string RefID, decimal Amount, string CheckNo, string TransRoute, string BankAccountNo, string SettlementDate, string DriveLicenseNo, string DriveLicenseState, string Name, AccountType accountType, CheckType checkType) {
            object[] results = this.Invoke("ACHVerify", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        SettlementDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        accountType,
                        checkType});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHVerifyAsync(string MerchantID, string RegKey, string NctID, string RefID, decimal Amount, string CheckNo, string TransRoute, string BankAccountNo, string SettlementDate, string DriveLicenseNo, string DriveLicenseState, string Name, AccountType accountType, CheckType checkType) {
            this.ACHVerifyAsync(MerchantID, RegKey, NctID, RefID, Amount, CheckNo, TransRoute, BankAccountNo, SettlementDate, DriveLicenseNo, DriveLicenseState, Name, accountType, checkType, null);
        }
        
        /// <remarks/>
        public void ACHVerifyAsync(string MerchantID, string RegKey, string NctID, string RefID, decimal Amount, string CheckNo, string TransRoute, string BankAccountNo, string SettlementDate, string DriveLicenseNo, string DriveLicenseState, string Name, AccountType accountType, CheckType checkType, object userState) {
            if ((this.ACHVerifyOperationCompleted == null)) {
                this.ACHVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHVerifyOperationCompleted);
            }
            this.InvokeAsync("ACHVerify", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        SettlementDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        accountType,
                        checkType}, this.ACHVerifyOperationCompleted, userState);
        }
        
        private void OnACHVerifyOperationCompleted(object arg) {
            if ((this.ACHVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHVerifyCompleted(this, new ACHVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHVerifyCredit", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHVerifyCredit(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string ProcessDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType) {
            object[] results = this.Invoke("ACHVerifyCredit", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        SettlementDate,
                        ProcessDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        PhoneNumber,
                        checkType});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHVerifyCreditAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string ProcessDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType) {
            this.ACHVerifyCreditAsync(MerchantID, RegKey, NctID, RefID, Amount, CheckNo, TransRoute, BankAccountNo, BankAccountType, SettlementDate, ProcessDate, DriveLicenseNo, DriveLicenseState, Name, Address1, Address2, City, State, ZipCode, PhoneNumber, checkType, null);
        }
        
        /// <remarks/>
        public void ACHVerifyCreditAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string ProcessDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType, 
                    object userState) {
            if ((this.ACHVerifyCreditOperationCompleted == null)) {
                this.ACHVerifyCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHVerifyCreditOperationCompleted);
            }
            this.InvokeAsync("ACHVerifyCredit", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        SettlementDate,
                        ProcessDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        PhoneNumber,
                        checkType}, this.ACHVerifyCreditOperationCompleted, userState);
        }
        
        private void OnACHVerifyCreditOperationCompleted(object arg) {
            if ((this.ACHVerifyCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHVerifyCreditCompleted(this, new ACHVerifyCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHVerifyDebit", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHVerifyDebit(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string ProcessDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType) {
            object[] results = this.Invoke("ACHVerifyDebit", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        SettlementDate,
                        ProcessDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        PhoneNumber,
                        checkType});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHVerifyDebitAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string ProcessDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType) {
            this.ACHVerifyDebitAsync(MerchantID, RegKey, NctID, RefID, Amount, CheckNo, TransRoute, BankAccountNo, BankAccountType, SettlementDate, ProcessDate, DriveLicenseNo, DriveLicenseState, Name, Address1, Address2, City, State, ZipCode, PhoneNumber, checkType, null);
        }
        
        /// <remarks/>
        public void ACHVerifyDebitAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string ProcessDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType, 
                    object userState) {
            if ((this.ACHVerifyDebitOperationCompleted == null)) {
                this.ACHVerifyDebitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHVerifyDebitOperationCompleted);
            }
            this.InvokeAsync("ACHVerifyDebit", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        SettlementDate,
                        ProcessDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        PhoneNumber,
                        checkType}, this.ACHVerifyDebitOperationCompleted, userState);
        }
        
        private void OnACHVerifyDebitOperationCompleted(object arg) {
            if ((this.ACHVerifyDebitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHVerifyDebitCompleted(this, new ACHVerifyDebitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHTransactionStatus", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHTransactionStatus(string MerchantID, string RegKey, string TransID) {
            object[] results = this.Invoke("ACHTransactionStatus", new object[] {
                        MerchantID,
                        RegKey,
                        TransID});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHTransactionStatusAsync(string MerchantID, string RegKey, string TransID) {
            this.ACHTransactionStatusAsync(MerchantID, RegKey, TransID, null);
        }
        
        /// <remarks/>
        public void ACHTransactionStatusAsync(string MerchantID, string RegKey, string TransID, object userState) {
            if ((this.ACHTransactionStatusOperationCompleted == null)) {
                this.ACHTransactionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHTransactionStatusOperationCompleted);
            }
            this.InvokeAsync("ACHTransactionStatus", new object[] {
                        MerchantID,
                        RegKey,
                        TransID}, this.ACHTransactionStatusOperationCompleted, userState);
        }
        
        private void OnACHTransactionStatusOperationCompleted(object arg) {
            if ((this.ACHTransactionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHTransactionStatusCompleted(this, new ACHTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHVoidTransaction", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHVoidTransaction(string MerchantID, string RegKey, string TransID) {
            object[] results = this.Invoke("ACHVoidTransaction", new object[] {
                        MerchantID,
                        RegKey,
                        TransID});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHVoidTransactionAsync(string MerchantID, string RegKey, string TransID) {
            this.ACHVoidTransactionAsync(MerchantID, RegKey, TransID, null);
        }
        
        /// <remarks/>
        public void ACHVoidTransactionAsync(string MerchantID, string RegKey, string TransID, object userState) {
            if ((this.ACHVoidTransactionOperationCompleted == null)) {
                this.ACHVoidTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHVoidTransactionOperationCompleted);
            }
            this.InvokeAsync("ACHVoidTransaction", new object[] {
                        MerchantID,
                        RegKey,
                        TransID}, this.ACHVoidTransactionOperationCompleted, userState);
        }
        
        private void OnACHVoidTransactionOperationCompleted(object arg) {
            if ((this.ACHVoidTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHVoidTransactionCompleted(this, new ACHVoidTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/GetTransactionDetails", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus GetTransactionDetails(string MerchantID, string RegKey, string RefID, string PostedDate, decimal Amount) {
            object[] results = this.Invoke("GetTransactionDetails", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        PostedDate,
                        Amount});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionDetailsAsync(string MerchantID, string RegKey, string RefID, string PostedDate, decimal Amount) {
            this.GetTransactionDetailsAsync(MerchantID, RegKey, RefID, PostedDate, Amount, null);
        }
        
        /// <remarks/>
        public void GetTransactionDetailsAsync(string MerchantID, string RegKey, string RefID, string PostedDate, decimal Amount, object userState) {
            if ((this.GetTransactionDetailsOperationCompleted == null)) {
                this.GetTransactionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionDetailsOperationCompleted);
            }
            this.InvokeAsync("GetTransactionDetails", new object[] {
                        MerchantID,
                        RegKey,
                        RefID,
                        PostedDate,
                        Amount}, this.GetTransactionDetailsOperationCompleted, userState);
        }
        
        private void OnGetTransactionDetailsOperationCompleted(object arg) {
            if ((this.GetTransactionDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionDetailsCompleted(this, new GetTransactionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHVerifyDebitRecurring", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CheckStatus ACHVerifyDebitRecurring(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType, 
                    int RecurringID) {
            object[] results = this.Invoke("ACHVerifyDebitRecurring", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        SettlementDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        PhoneNumber,
                        checkType,
                        RecurringID});
            return ((CheckStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHVerifyDebitRecurringAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType, 
                    int RecurringID) {
            this.ACHVerifyDebitRecurringAsync(MerchantID, RegKey, NctID, RefID, Amount, CheckNo, TransRoute, BankAccountNo, BankAccountType, SettlementDate, DriveLicenseNo, DriveLicenseState, Name, Address1, Address2, City, State, ZipCode, PhoneNumber, checkType, RecurringID, null);
        }
        
        /// <remarks/>
        public void ACHVerifyDebitRecurringAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string SettlementDate, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string PhoneNumber, 
                    CheckType checkType, 
                    int RecurringID, 
                    object userState) {
            if ((this.ACHVerifyDebitRecurringOperationCompleted == null)) {
                this.ACHVerifyDebitRecurringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHVerifyDebitRecurringOperationCompleted);
            }
            this.InvokeAsync("ACHVerifyDebitRecurring", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        SettlementDate,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        PhoneNumber,
                        checkType,
                        RecurringID}, this.ACHVerifyDebitRecurringOperationCompleted, userState);
        }
        
        private void OnACHVerifyDebitRecurringOperationCompleted(object arg) {
            if ((this.ACHVerifyDebitRecurringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHVerifyDebitRecurringCompleted(this, new ACHVerifyDebitRecurringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.paymentresource.com/webservices/ACHVerifyRecurring", RequestNamespace="http://www.paymentresource.com/webservices/", ResponseNamespace="http://www.paymentresource.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RecurringStatus ACHVerifyRecurring(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string NextProcessDate, 
                    int NumOfDebits, 
                    BillingCycles BillingCycle, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Phone, 
                    CheckType checkType, 
                    bool fullAmountVerify) {
            object[] results = this.Invoke("ACHVerifyRecurring", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        NextProcessDate,
                        NumOfDebits,
                        BillingCycle,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address,
                        City,
                        State,
                        ZipCode,
                        Phone,
                        checkType,
                        fullAmountVerify});
            return ((RecurringStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ACHVerifyRecurringAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string NextProcessDate, 
                    int NumOfDebits, 
                    BillingCycles BillingCycle, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Phone, 
                    CheckType checkType, 
                    bool fullAmountVerify) {
            this.ACHVerifyRecurringAsync(MerchantID, RegKey, NctID, RefID, Amount, CheckNo, TransRoute, BankAccountNo, BankAccountType, NextProcessDate, NumOfDebits, BillingCycle, DriveLicenseNo, DriveLicenseState, Name, Address, City, State, ZipCode, Phone, checkType, fullAmountVerify, null);
        }
        
        /// <remarks/>
        public void ACHVerifyRecurringAsync(
                    string MerchantID, 
                    string RegKey, 
                    string NctID, 
                    string RefID, 
                    decimal Amount, 
                    string CheckNo, 
                    string TransRoute, 
                    string BankAccountNo, 
                    AccountType BankAccountType, 
                    string NextProcessDate, 
                    int NumOfDebits, 
                    BillingCycles BillingCycle, 
                    string DriveLicenseNo, 
                    string DriveLicenseState, 
                    string Name, 
                    string Address, 
                    string City, 
                    string State, 
                    string ZipCode, 
                    string Phone, 
                    CheckType checkType, 
                    bool fullAmountVerify, 
                    object userState) {
            if ((this.ACHVerifyRecurringOperationCompleted == null)) {
                this.ACHVerifyRecurringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnACHVerifyRecurringOperationCompleted);
            }
            this.InvokeAsync("ACHVerifyRecurring", new object[] {
                        MerchantID,
                        RegKey,
                        NctID,
                        RefID,
                        Amount,
                        CheckNo,
                        TransRoute,
                        BankAccountNo,
                        BankAccountType,
                        NextProcessDate,
                        NumOfDebits,
                        BillingCycle,
                        DriveLicenseNo,
                        DriveLicenseState,
                        Name,
                        Address,
                        City,
                        State,
                        ZipCode,
                        Phone,
                        checkType,
                        fullAmountVerify}, this.ACHVerifyRecurringOperationCompleted, userState);
        }
        
        private void OnACHVerifyRecurringOperationCompleted(object arg) {
            if ((this.ACHVerifyRecurringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ACHVerifyRecurringCompleted(this, new ACHVerifyRecurringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.paymentresource.com/webservices/")]
    public enum AccountType {
        
        /// <remarks/>
        Checking,
        
        /// <remarks/>
        Saving,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.paymentresource.com/webservices/")]
    public enum CheckType {
        
        /// <remarks/>
        Personal,
        
        /// <remarks/>
        Business,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.paymentresource.com/webservices/")]
    public partial class CheckStatus {
        
        private string authCodeField;
        
        private string messageField;
        
        private System.DateTime postedDateField;
        
        private string refIDField;
        
        private string statusField;
        
        private int successField;
        
        private int transIDField;
        
        private decimal amountField;
        
        /// <remarks/>
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PostedDate {
            get {
                return this.postedDateField;
            }
            set {
                this.postedDateField = value;
            }
        }
        
        /// <remarks/>
        public string RefID {
            get {
                return this.refIDField;
            }
            set {
                this.refIDField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public int TransID {
            get {
                return this.transIDField;
            }
            set {
                this.transIDField = value;
            }
        }
        
        /// <remarks/>
        public decimal Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.paymentresource.com/webservices/")]
    public partial class RecurringStatus {
        
        private decimal amountField;
        
        private string authCodeField;
        
        private string messageField;
        
        private System.DateTime postedDateField;
        
        private int recurringIDField;
        
        private string refIDField;
        
        private string statusField;
        
        private int successField;
        
        /// <remarks/>
        public decimal Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PostedDate {
            get {
                return this.postedDateField;
            }
            set {
                this.postedDateField = value;
            }
        }
        
        /// <remarks/>
        public int RecurringID {
            get {
                return this.recurringIDField;
            }
            set {
                this.recurringIDField = value;
            }
        }
        
        /// <remarks/>
        public string RefID {
            get {
                return this.refIDField;
            }
            set {
                this.refIDField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.paymentresource.com/webservices/")]
    public enum BillingCycles {
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Quarterly,
        
        /// <remarks/>
        Yearly,
        
        /// <remarks/>
        Weekly,
        
        /// <remarks/>
        BiWeekly,
        
        /// <remarks/>
        Every4weeks,
        
        /// <remarks/>
        Every8weeks,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHCreditCompletedEventHandler(object sender, ACHCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHDebitCompletedEventHandler(object sender, ACHDebitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHDebitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHDebitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHRecurringCompletedEventHandler(object sender, ACHRecurringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHRecurringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHRecurringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecurringStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecurringStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHVerifyCompletedEventHandler(object sender, ACHVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHVerifyCreditCompletedEventHandler(object sender, ACHVerifyCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHVerifyCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHVerifyCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHVerifyDebitCompletedEventHandler(object sender, ACHVerifyDebitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHVerifyDebitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHVerifyDebitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHTransactionStatusCompletedEventHandler(object sender, ACHTransactionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHTransactionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHTransactionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHVoidTransactionCompletedEventHandler(object sender, ACHVoidTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHVoidTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHVoidTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTransactionDetailsCompletedEventHandler(object sender, GetTransactionDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHVerifyDebitRecurringCompletedEventHandler(object sender, ACHVerifyDebitRecurringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHVerifyDebitRecurringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHVerifyDebitRecurringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ACHVerifyRecurringCompletedEventHandler(object sender, ACHVerifyRecurringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ACHVerifyRecurringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ACHVerifyRecurringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RecurringStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RecurringStatus)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591